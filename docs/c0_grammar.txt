Letter -> [_a-zA-Z]
NonZeroDigit -> [1-9]
Digit -> "0" | NonZeroDigit
LegalChar -> Letter | Digit

// #region Tokens
// Spaces are optional between tokens. They are omitted below.

ConstKw -> "const"
VoidKw -> "void"
IfKw -> "if"
ElseKw -> "else"
WhileKw -> "while"
ReturnKw -> "return"

Semicolon -> ";"
Sign -> [+-]
AdditiveOp -> [+-]
MultiplicativeOp -> [*/]
RelationalOp -> "<" | "<=" | "==" | "!=" | ">=" | ">"
Identifier -> Letter LegalChar*
// Integer -> Sign? NonZeroDigit Digit* 
Integer -> "-" ? ( "0" | [1-9][0-9_]* | "0x" [0-9a-f][0-9a-f_]* 
    | "0o" [0-7][0-7_]+ | "0b" [01][01_]* )
LeftParenthesis -> "("
RightParenthesis -> ")"
LeftCurlyBrace -> "{"
RightCurlyBrace -> "}"
AssignFrom -> "="
Comma -> ","

// #endregion

Type -> Identifier
NonVoidType -> Type | VoidKw

ConstDefinition -> Identifier AssignFrom Integer
ConstDeclaration -> ConstKw ConstDefinition (Comma ConstDefinition)+ Semicolon
Constants -> ConstDeclarations+

VariableDeclaration -> NonVoidType Identifier (Comma Identifier)+ Semicolon
Variables -> VariableDeclaration+

Factor =
    | LeftParenthesis Expression RightParenthesis
    | Integer
    | Identifier
    | CallExpresstion

MultExpression -> Factor MultiplicativeOp MultExpression | Factor
AddExpression -> MultExpression AdditiveOp AddExpresion | MultExpression
CompareExpression -> AddExpression RelationalOp CompareExpression | AddExpression

Expression =
    | LeftParenthesis Expression RightParenthesis
    | CompareExpression
    | CallExpression

AssignStatement -> Identifier AssignFrom Expression Semicolon

IfStatement -> IfKw LeftParenthesis CompareExpression RightParenthesis Statement (
    ElseKw Statement
)?

WhileStatement -> WhileKw LeftParenthesis CompareExpression RightParenthesis Statement

Statement =
    | IfStatement
    | WhileStatement
    | CallStatement
    | AssignStatement
    | Block
    | EmptyStatement

Block -> LeftCurlyBrace Constants? Variables? Statements RightCurlyBrace

FunctionParams -> LeftParenthesis (NonVoidType Identifier (Comma NonVoidType Identifier)+)? RightParenthsis
FunctionDefinition -> Type Identifier FunctionParams Block
FunctionDefinitions -> FunctionDefinition+

// Main function is just a function with name "main". Nothing special.
Program -> Constants? Variables? FunctionDefinitions+
